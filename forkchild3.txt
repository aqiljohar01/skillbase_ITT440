#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/wait.h>

#define No_child 3

void handle_interrupt(int signum)
{
    printf("Received interrupt message in Child Process %d\n", getpid());
    exit(0);
}

int main()
{
    pid_t child_pids[No_child];
    int pipes[No_child][2];
    int a;

    // Create pipes
    for (a = 0; a < No_child; a++) {
        if (pipe(pipes[a]) == -1) {
            perror("pipe");
            exit(1);
        }
    }

    // Fork child processes
    for (a = 0; a < No_child; a++) {
        child_pids[a] = fork();

        if (child_pids[a] == -1) {
            perror("fork");
            exit(1);
        } else if (child_pids[a] == 0) {
            // Child process
            close(pipes[a][1]);  // Close write end of pipe
            signal(SIGPIPE, handle_interrupt);

            // Read message from parent
            char message[256];
            read(pipes[a][0], message, sizeof(message));
            printf("Child Process %d received message: %s\n", getpid(), message);

            close(pipes[a][0]);  // Close read end of pipe
            exit(0);
        } else {
            // Parent process
            close(pipes[a][0]);  // Close read end of pipe

            // Send message to child
            char message[256];
            sprintf(message, "Message from Parent to Child %d", a + 1);
            write(pipes[a][1], message, sizeof(message));

            close(pipes[a][1]);  // Close write end of pipe
        }
    }

    // Wait for all child processes to exit
    for (a = 0; a < No_child; a++) {
        wait(NULL);
    }

    return 0;
}